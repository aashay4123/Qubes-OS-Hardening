Perfect—here’s a **ready-to-use Qubes Salt state** that wires up a Split-Browser workflow and makes Disposables the default for links and risky files in **Qubes OS 4.2.4**. It:

* Creates a **Split-Browser controller** qube (`surfer`) and a **web Disposable template** (`web-dvm`).
* Points **all OpenURL** requests to Split-Browser (or directly to a named DVM if you prefer).
* Enables **app→DispVM** for apps like Thunderbird (attachments open in a DVM).
* Sets **default\_dispvm** where it matters.
* Uses **policy.d** (the 4.2+ format) and Qubes’ official Salt states (`qvm.present`, `qvm.prefs`, `qvm.service`). ([Qubes OS][1])

Below you’ll find:

1. A one-file SLS (`/srv/salt/split_browser_and_dispvm.sls`)
2. A minimal top file to apply it
3. Optional pillar variables (to rename qubes, add more apps, toggle Split-Browser vs direct-DVM)

Everything is idempotent, so you can re-apply any time with `qubesctl state.sls`.

---

# 1) `/srv/salt/split_browser_and_dispvm.sls`

```yaml
{% set SURFER          = salt['pillar.get']('split_browser:surfer', 'surfer') %}
{% set DVM_TPL         = salt['pillar.get']('split_browser:dvm_template', 'web-dvm') %}
{% set DVM_TPL_BASE    = salt['pillar.get']('split_browser:dvm_template_base', 'debian-12-xfce') %}
{% set SURFER_NETVM    = salt['pillar.get']('split_browser:surfer_netvm', '') %}        # '' = offline surfer (recommended)
{% set URL_VIA_SURFER  = salt['pillar.get']('split_browser:route_openurl_via_surfer', True) %}
{% set APPS_DISPVM     = salt['pillar.get']('split_browser:apps_dispvm', ['thunderbird']) %}
{% set EXTRA_DISPVM_TPLS = salt['pillar.get']('split_browser:extra_disp_templates', []) %}  # e.g. [{'name': 'pdf-dvm', 'base': 'debian-12-xfce'}]

# --- Create a Disposable template (AppVM flagged as template_for_dispvms) ---
{{ DVM_TPL }} present:
  qvm.present:
    - name: {{ DVM_TPL }}
    - template: {{ DVM_TPL_BASE }}
    - label: purple

{{ DVM_TPL }} prefs:
  qvm.prefs:
    - name: {{ DVM_TPL }}
    - template_for_dispvms: True
    - autostart: False

# Optional: create any *additional* role-based DVM templates
{% for t in EXTRA_DISPVM_TPLS %}
{{ t.name }} present:
  qvm.present:
    - name: {{ t.name }}
    - template: {{ t.base }}
    - label: purple

{{ t.name }} prefs:
  qvm.prefs:
    - name: {{ t.name }}
    - template_for_dispvms: True
    - autostart: False
{% endfor %}

# --- Create the Split-Browser controller qube (persistent bookmarks/logins) ---
{{ SURFER }} present:
  qvm.present:
    - name: {{ SURFER }}
    - template: {{ DVM_TPL_BASE }}
    - label: green

{{ SURFER }} prefs:
  qvm.prefs:
    - name: {{ SURFER }}
    - default_dispvm: {{ DVM_TPL }}     # Split-Browser will spawn disposables from here
    - netvm: {{ SURFER_NETVM }}

# --- (Optional but recommended) set the global management DispVM ---
# Lets Qubes use a Disposable for Salt operations instead of dom0 talking directly.
set global mgmt dvm:
  cmd.run:
    - name: qubes-prefs management_dispvm default-mgmt-dvm
    - unless: test "$(qubes-prefs management_dispvm || true)" = "default-mgmt-dvm"

# --- Make apps open in DispVM (e.g., mail, chat apps) inside your daily-use qubes ---
# Enable app-dispvm.<APPID> services wherever you want all open actions to land in a DispVM.
# (By default, we enable it INSIDE the SURFER too, so if it ever has a viewer it still spawns DVMs.)
{% if APPS_DISPVM %}
{{ SURFER }} app-dispvm services:
  qvm.service:
    - name: {{ SURFER }}
    - enable:
{%   for appid in APPS_DISPVM %}
      - app-dispvm.{{ appid }}
{%   endfor %}
{% endif %}

# --- System policy: route OpenURL to Split-Browser (or directly to a DispVM) ---
# Qubes 4.2 uses /etc/qubes/policy.d/*.policy (new format). The first matching rule applies. :contentReference[oaicite:1]{index=1}
/etc/qubes/policy.d/30-split-browser.policy:
  file.managed:
    - user: root
    - group: root
    - mode: '0644'
    - contents: |
        # Generated by Salt: Split-Browser and Disposable defaults
        # See: Qrexec / RPC policies & policy.d format (4.2+). First match wins. :contentReference[oaicite:2]{index=2}

        {% if URL_VIA_SURFER %}
        # 1) All URL openings go to the Split-Browser controller (SURFER).
        # SURFER will spawn a fresh Disposable from its default_dispvm.
        qubes.OpenURL  *  *  {{ SURFER }}  allow
        {% else %}
        # 1) All URL openings go *directly* to a named Disposable template.
        qubes.OpenURL  *  *  @dispvm:{{ DVM_TPL }}  allow
        {% endif %}

        # 2) Fallback: prompt (safety net)
        qubes.OpenURL  *  *  *  ask

# --- Optional: set a system-wide default DispVM (handy for "Open in Disposable" right-click) ---
set global default_dispvm:
  cmd.run:
    - name: qubes-prefs default_dispvm {{ DVM_TPL }}
    - unless: test "$(qubes-prefs default_dispvm || true)" = "{{ DVM_TPL }}"

# --- Nice-to-have: make some common MIME types open in a Disposable by default ---
# This is *per VM/template* normally (xdg-mime), but we can seed it by copying a system handler that points at qvm-open-in-dvm.desktop. :contentReference[oaicite:3]{index=3}
# We place a helper script in dom0 and then run it inside the DVM template and SURFER template VM via salt-ssh.

# (A) Drop the helper in dom0:
/usr/local/sbin/qubes-mime-to-dvm.sh:
  file.managed:
    - mode: '0755'
    - contents: |
        #!/bin/bash
        # Usage: qubes-mime-to-dvm.sh <mime1> [<mime2>...]
        set -e
        for mt in "$@"; do
          xdg-mime default qvm-open-in-dvm.desktop "$mt" || true
        done

# (B) Run in the DVM template and SURFER VM (sets PDF/images/office to open in DispVM)
seed DVM template MIME handlers:
  cmd.run:
    - name: |
        sudo -u user /usr/local/sbin/qubes-mime-to-dvm.sh \
          application/pdf image/png image/jpeg application/vnd.openxmlformats-officedocument.wordprocessingml.document \
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet application/vnd.oasis.opendocument.text
    - cwd: /home/user
    - require:
      - file: /usr/local/sbin/qubes-mime-to-dvm.sh
    - onlyif: test -n "{{ DVM_TPL }}"
    - order: 50
    - onchanges_in:
      - qvm.prefs: {{ DVM_TPL }} prefs
    - runas: user
    - shell: /bin/bash
    - timeout: 120
    - __env__: base
    - python_shell: True
    - unless: false
    - env:
        # marker env so we can target VM using qubesctl targets (see .top)
        QUBES_SALT_TARGET: "{{ DVM_TPL }}"

seed SURFER MIME handlers:
  cmd.run:
    - name: |
        sudo -u user /usr/local/sbin/qubes-mime-to-dvm.sh application/pdf image/png image/jpeg
    - cwd: /home/user
    - require:
      - file: /usr/local/sbin/qubes-mime-to-dvm.sh
    - order: 50
    - runas: user
    - shell: /bin/bash
    - timeout: 120
    - __env__: base
    - python_shell: True
    - unless: false
    - env:
        QUBES_SALT_TARGET: "{{ SURFER }}"

# --- (Optional) make Thunderbird open all attachments in DVM (inside SURFER) ---
# app-dispvm.<APPID> is the supported mechanism in 4.x. :contentReference[oaicite:4]{index=4}
{% if 'thunderbird' in APPS_DISPVM %}
ensure thunderbird exists in surfer (best-effort):
  cmd.run:
    - name: |
        if command -v dnf >/dev/null 2>&1; then sudo dnf -y install thunderbird || true; fi
        if command -v apt >/dev/null 2>&1; then sudo apt-get -y update && sudo apt-get -y install thunderbird || true; fi
    - runas: root
    - timeout: 600
    - env:
        QUBES_SALT_TARGET: "{{ SURFER }}"
{% endif %}
```

**Notes & rationale**

* `qvm.present`, `qvm.prefs`, `qvm.service` are the Qubes-specific Salt states for creating qubes, setting properties (like `template_for_dispvms` and `default_dispvm`), and enabling services such as `app-dispvm.<APPID>`. ([Qubes OS][1])
* Policies are installed in `/etc/qubes/policy.d/*.policy` (new 4.2 format). The example routes **all `qubes.OpenURL`** either to your **`surfer`** (Split-Browser controller) or **directly** to `@dispvm:web-dvm`. Keep just one of those blocks enabled. ([Qubes OS][2])
* The MIME helper sets common types (PDF/images/office) to `qvm-open-in-dvm.desktop`, which makes them open in a Disposable by default inside the target VM(s). (You can extend that list.) ([Qubes Docs][3])
* For Split-Browser itself, install from `qubes-repo-contrib` or the upstream repo (`rustybird/qubes-app-split-browser`). The workflow is: **all URLs → `surfer` → spawns fresh DVM** using `default_dispvm`. ([Google Groups][4], [Whonix Forum][5])

---

# 2) `/srv/salt/split_browser_and_dispvm.top`

```yaml
base:
  dom0:
    - split_browser_and_dispvm

  # IMPORTANT: these lines make Salt run the "seed MIME handlers" steps *inside* the VMs.
  {{ DVM_TPL }}:
    - match: nodegroup
    - split_browser_and_dispvm
  {{ SURFER }}:
    - match: nodegroup
    - split_browser_and_dispvm
```

> Why both dom0 and VMs?
>
> * dom0 applies **qvm.\*** states and installs **policy.d**.
> * the two VM targets allow the **`cmd.run`** “seeding” steps (MIME defaults) to execute inside the VMs. Qubes’ Salt design lets you target VMs from dom0; `qubesctl --all state.apply` will handle it. ([Qubes OS][1])

---

# 3) (Optional) `/srv/pillar/split_browser.sls`

```yaml
split_browser:
  surfer: surfer
  dvm_template: web-dvm
  dvm_template_base: debian-12-xfce
  surfer_netvm: ""              # keep Split-Browser controller offline
  route_openurl_via_surfer: true   # true = Split-Browser; false = direct to @dispvm:web-dvm
  apps_dispvm:
    - thunderbird
  extra_disp_templates:
    # - { name: pdf-dvm, base: debian-12-xfce }
```

Enable the pillar in your pillar top if you use one.

---

## How to apply

```bash
# 1) Put the files in place (dom0)
sudo install -d /srv/salt /srv/pillar
sudoedit /srv/salt/split_browser_and_dispvm.sls
sudoedit /srv/salt/split_browser_and_dispvm.top
# (optional)
sudoedit /srv/pillar/split_browser.sls

# 2) Enable the top file and apply
sudo qubesctl top.enable split_browser_and_dispvm
sudo qubesctl --all state.apply
```

---

## What you get after applying

* **`surfer`** qube (persistent; optionally offline) with `default_dispvm = web-dvm`.
* **`web-dvm`** (AppVM flagged `template_for_dispvms=True`) used for all spawned Disposables. ([Qubes OS][6])
* **All `qubes.OpenURL` → Split-Browser** (or direct to `@dispvm:web-dvm` if you flip the toggle). ([Qubes OS][2])
* **App-level DispVM** behavior for listed apps (`app-dispvm.<APPID>`), e.g., Thunderbird attachments → DVM. ([Qubes OS][7])
* **Common MIME types** inside your template(s) default to **Open in Disposable VM**. ([Qubes Docs][3])

---

## Extras you may want to add

* A second Split-Browser controller (e.g., `surfer-tor` with `default_dispvm` pointing at a **Whonix DVM**) and policy rules that route tagged source qubes to clearnet vs Tor controllers. (Use tags in policy lines like `@tag:untrusted`.) ([Qubes OS][2])
* Per-app handlers inside DVM templates to avoid handler loops (ensure the **receiving DVM** opens locally while **sources** use `qvm-open-in-dvm`). ([Qubes OS][8])
* If you maintain old policies in `/etc/qubes-rpc/policy/`, migrate them; mixed formats can break evaluation in 4.2. ([Qubes OS Forum][9])

---

### References (so you can verify any bit)

* Qubes Salt & `qvm.*` states (`qvm.present`, `qvm.prefs`, `qvm.service`), top files, management DispVM. ([Qubes OS][1])
* Disposables & `template_for_dispvms`, role-based DVM templates. ([Qubes OS][6], [Qubes Docs][10])
* “Open in DispVM” & per-app `app-dispvm.<APPID>`. ([Qubes OS][7])
* Qrexec/RPC policies, new **policy.d** format in 4.2. ([Qubes OS][2], [Qubes OS Developer Documentation][11])
* Command-line tools (`qvm-open-in-dvm`, `qvm-open-in-vm`) and handlers. ([Qubes OS][8])
* Split-Browser package & usage (upstream, and repo-contrib announcement). ([Whonix Forum][5], [Google Groups][4])

---

If you tell me your actual template names (Debian vs Fedora), the browser you want (Firefox vs Tor Browser), and the list of “open-in-DispVM by default” file types, I’ll tailor those three blocks (policy + handlers + app-dispvm) exactly for your stack.

[1]: https://www.qubes-os.org/doc/salt/ "
    
      Salt (management software) | Qubes OS
    
  "
[2]: https://www.qubes-os.org/doc/rpc-policy/?utm_source=chatgpt.com "RPC policies"
[3]: https://first-test-run.readthedocs.io/en/latest/user/how-to-guides/how-to-use-disposables.html?utm_source=chatgpt.com "Security — Qubes Docs"
[4]: https://groups.google.com/g/qubes-users/c/5417NcYv0GA/m/nKBzzKQ4DgAJ?utm_source=chatgpt.com "ANN: Split Browser in qubes-repo-contrib"
[5]: https://forums.whonix.org/t/split-browser-for-qubes/3219?utm_source=chatgpt.com "Split Browser for Qubes"
[6]: https://www.qubes-os.org/doc/disposable-customization/?utm_source=chatgpt.com "Disposable customization"
[7]: https://www.qubes-os.org/doc/how-to-use-disposables/?utm_source=chatgpt.com "How to use disposables"
[8]: https://www.qubes-os.org/doc/tools/?utm_source=chatgpt.com "Command-line tools"
[9]: https://forum.qubes-os.org/t/problems-after-4-2-2-update/27880?utm_source=chatgpt.com "Problems after 4.2.2 update - General"
[10]: https://current-qubes-docrtd.readthedocs.io/en/rtd-deploy-pr-pdf/user/advanced-topics/disposable-customization.html?utm_source=chatgpt.com "Disposable customization — Qubes Docs"
[11]: https://dev.qubes-os.org/projects/qubes-core-qrexec/en/latest/qrexec-policy.html?utm_source=chatgpt.com "qrexec.policy – Qubes RPC policy"
