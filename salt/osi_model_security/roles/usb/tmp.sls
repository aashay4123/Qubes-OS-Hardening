{# OSI device hardening for Qubes OS — all external devices #}
{# Defaults (override in pillar if you like) #}
{% set sys_usb = salt['pillar.get']('osi:sys_usb', 'sys-usb') %}
{% set sys_audio = salt['pillar.get']('osi:sys_audio', 'sys-audio') %}
{% set audio_template = salt['pillar.get']('osi:audio_template', 'fedora-42-minimal') %}
{% set disable_audio_on = salt['pillar.get']('osi:disable_audio_on', ['sys-net','sys-firewall','sys-dns','sys-ids','sys-vpn','sys-whonix']) %}

# --- Optional: ensure sys-audio exists (safe no-op if already present) ---
sys-audio-present:
  qvm.present:
    - name: {{ sys_audio }}
    - template: {{ audio_template }}
    - label: blue
    - prefs:
        netvm: ''
        autostart: True

default-audiovm:
  cmd.run:
    - name: qubes-prefs -s default_audiovm {{ sys_audio }}
    - unless: test "$(qubes-prefs default_audiovm 2>/dev/null)" = "{{ sys_audio }}"

# Remove audio output from infrastructure qubes (they don’t need speakers)
{% for vm in disable_audio_on %}
no-audio-{{ vm }}:
  cmd.run:
    - name: qvm-prefs {{ vm }} audiovm ''
    - unless: test -z "$(qvm-prefs {{ vm }} audiovm 2>/dev/null)"
{% endfor %}

# --- Qrexec policy: strict “ask” for device usage ---
/etc/qubes/policy.d/30-device-hardening.policy:
  file.managed:
    - mode: '0644'
    - user: root
    - group: root
    - contents: |
        ## Qubes OS — OSI Device Hardening (generated by Salt)
        ## Everything here is evaluated by qrexec-policy-daemon. First match wins.
        ## USB raw passthrough (whole devices)
        ## Only allow with sys-usb as backend; always ask the user.
        qubes.USBAttach *  @anyvm  @anyvm    ask
        # Underlying USBIP link must always terminate in {{ sys_usb }} as backend:
        qubes.USB +*       @anyvm  {{ sys_usb }}  allow
        qubes.USB +*       @anyvm  @anyvm        deny
        # Detach is always safe to allow:
        qubes.USBDetach *  @anyvm  {{ sys_usb }}  allow
        qubes.USBDetach *  @anyvm  dom0          allow

        ## Input devices to dom0 (from sys-usb only) — always ask
        qubes.InputKeyboard  {{ sys_usb }}  dom0   ask,default_target=dom0
        qubes.InputKeyboard  @anyvm         @anyvm deny
        qubes.InputMouse     {{ sys_usb }}  dom0   ask,default_target=dom0
        qubes.InputMouse     @anyvm         @anyvm deny

        ## Microphone consent gate (audio input) via AudioVM
        ## Only the AudioVM may enable/disable mic for a qube; always ask on enable.
        qubes.AudioInputEnable +@anyvm  @anyvm   {{ sys_audio }}  ask
        qubes.AudioInputDisable +@anyvm @anyvm   {{ sys_audio }}  allow

        ## (Optional templates for future tightening — keep commented for now)
        ## Example: Allow raw USB to only @tag:usb-ok targets, ask otherwise:
        # qubes.USBAttach *  @anyvm   @tag:usb-ok    ask
        # qubes.USBAttach *  @anyvm   @anyvm         deny

# --- Minimal sys-usb safety checks (fail fast) ---
assert-sys-usb-exists:
  cmd.run:
    - name: qvm-check {{ sys_usb }}
    - unless: qvm-check {{ sys_usb }}

# --- Verifier script (quick sanity checks) ---
/usr/local/sbin/verify_device_hardening:
  file.managed:
    - mode: '0755'
    - user: root
    - group: root
    - contents: |
        #!/usr/bin/env bash
        set -euo pipefail
        P=/etc/qubes/policy.d/30-device-hardening.policy
        ok=1
        say(){ printf "%s\n" "$*"; }
        have(){ grep -F -- "$1" "$P" >/dev/null 2>&1 || { say "MISSING policy: $1"; ok=0; }; }
        [ -f "$P" ] || { echo "Missing $P"; exit 1; }

        echo "== Device Hardening Policy Check =="
        have "qubes.USBAttach *  @anyvm  @anyvm    ask"
        have "qubes.USB +*       @anyvm  {{ sys_usb }}  allow"
        have "qubes.InputKeyboard  {{ sys_usb }}  dom0   ask"
        have "qubes.InputMouse     {{ sys_usb }}  dom0   ask"
        have "qubes.AudioInputEnable +@anyvm  @anyvm   {{ sys_audio }}  ask"

        echo "== sys-usb backend =="
        if qvm-check {{ sys_usb }} >/dev/null 2>&1; then
          echo "ok: {{ sys_usb }} exists"
        else
          echo "FAIL: {{ sys_usb }} missing"; ok=0
        fi

        echo "== AudioVM configuration =="
        d=$(qubes-prefs default_audiovm 2>/dev/null || true)
        if [ "$d" = "{{ sys_audio }}" ]; then
          echo "ok: default_audiovm={{ sys_audio }}"
        else
          echo "WARN: default_audiovm is '$d' (expected {{ sys_audio }})"
        fi

        echo "== Infra qubes: audio disabled =="
        failed=0
        {% for vm in disable_audio_on %}
        a=$(qvm-prefs {{ vm }} audiovm 2>/dev/null || true)
        if [ -z "$a" ]; then echo "ok: {{ vm }} no audiovm"; else echo "WARN: {{ vm }} audiovm=$a"; failed=1; fi
        {% endfor %}
        [ $ok -eq 1 ] && echo "RESULT: PASS" || { echo "RESULT: FAIL"; exit 2; }
